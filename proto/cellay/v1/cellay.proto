syntax = "proto3";
package cellay.v1;

option go_package = "github.com/mayamika/cellay/proto/cellay/v1;cellayv1";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Cellay";
    version: "0.0.0";
  };
  base_path: "/api/v1";
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
  responses: {
    key: "403";
    value: {
      description: "Returned when the user does not have permission to access the resource.";
    }
  }
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          type: STRING;
        }
      }
    }
  }
};

message GamesServiceGetInfoRequest {
  int32 id = 1;
}

message GamesServiceGetInfoResponse {
  int32 id = 1;
  string name = 2;
  string description = 3;
}

message GamesServiceGetCodeRequest {
  int32 id = 1;
}

message GamesServiceGetCodeResponse {
  int32 id = 1;
  bytes code = 2;
}

message GamesServiceGetAssetsRequest {
  int32 id = 1;
}

message GameAssetsField {
  int32 rows = 1;
  int32 cols = 2;
}

message GameAssetsLayer {
  int32 width = 1;
  int32 height = 2;
  int32 depth = 3;
  bytes texture = 4;
}

message GamesServiceGetAssetsResponse {
  int32 id = 1;
  GameAssetsField field = 2;
  map<string, GameAssetsLayer> layers = 3;
}

message GamesServiceGetAllRequest {}

message GamesServiceGetAllResponse {
  repeated GamesServiceGetInfoResponse games = 1;
  int32 total = 2;
}

service GamesService {
  rpc GetInfo(GamesServiceGetInfoRequest) returns (GamesServiceGetInfoResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns games info";
    };
    option (google.api.http).get = "/games/{id}/info";
  }
  rpc GetCode(GamesServiceGetCodeRequest) returns (GamesServiceGetCodeResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns games code";
    };
    option (google.api.http).get = "/games/{id}/code";
  }
  rpc GetAssets(GamesServiceGetAssetsRequest) returns (GamesServiceGetAssetsResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns games assets";
    };
    option (google.api.http).get = "/games/{id}/assets";
  }
  rpc GetAll(GamesServiceGetAllRequest) returns (GamesServiceGetAllResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns all games list";
    };
    option (google.api.http).get = "/games";
  }
}

message MatchesServiceNewRequest {
  int32 game_id = 1;
}

message MatchesServiceNewResponse {
  string token = 1;
}

service MatchesService {
  rpc New(MatchesServiceNewRequest) returns (MatchesServiceNewResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Start new match";
    };
    option (google.api.http) = {
      post: "/matches";
      body: "*";
    };
  };
}
